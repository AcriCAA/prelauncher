class User < ActiveRecord::Base
	belongs_to :referrer, class_name: "User", foreign_key: :referrer_id
    has_many :referrals, class_name: "User", foreign_key: :referrer_id

    validates :email, uniqueness: true, format: { with: Devise::email_regexp, message: "Invalid email format." }, presence: true
    #validates :ip_address, presence: true, uniqueness: true

    before_create :set_referral_code
    after_create :add_to_email_list


    def prize
    	Prize.where(number_of_referrals: 0..number_of_referrals).order("number_of_referrals asc").last
    end

    def progress
        unit = 1.fdiv(Prize.all.count)
        targets = Prize.all.order("number_of_referrals asc").pluck(:number_of_referrals)
        base = 0

        return 1 if prize && targets.last == prize.number_of_referrals

        targets.each_with_index do |value, index|
            if number_of_referrals >= value
                base += unit 
            elsif index > 0
                base += unit * (number_of_referrals - targets[index - 1]).fdiv(value - targets[index - 1])
                break
            end
        end

        base -= unit.fdiv(2) if prize.present?

        return base
    end

    def prize_name
        prize ? prize_name : nil
    end

    def number_of_referrals
        referrals.count
    end

    def referral_url(root_url = "http://prelaunch.morgans.me")
        authorize = UrlShortener::Authorize.new 'morgansdro', 'R_802e933fa9b14e9aae49e542ae469b28'
        client = UrlShortener::Client.new authorize
        shorten = client.shorten("http://prelaunch.morgans.me/" + "?ref=" + referral_code)
        return shorten.urls
    end

    def self.as_csv
        attributes = [:id, :created_at, :email, :ip_address, :referrer_id, :referral_code, :number_of_referrals, :prize_name]

        CSV.generate do |csv|
            csv << attributes
            all.each do |item|
                raw = []
                attributes.each do |attribute|
                    raw << item.send(attribute)
                end
                csv << raw
            end
        end
    end

    def facebook_oauth
        facebook_access_token ? Koala::Facebook::API.new(facebook_access_token) : nil
    end

    def twitter_oauth
        if twitter_access_token && twitter_consumer_secret
            Twitter::REST::Client.new do |config|
              config.consumer_key        = "KKrYAuea3McWvaBSkfj6qcb6x"
              config.consumer_secret     = "okHWmyLt0JSAKUwn6Bwx4Y7z3mV8dMm2V6YanrmjnOZier5whW"
              config.access_token        = twitter_access_token 
              config.access_token_secret = twitter_consumer_secret
            end
        else
            false
        end
    end

    def self.social_posting
        all.each do |user|
            begin
                user.post_to_facebook
                user.post_to_twitter 
            rescue
                # Handle exception
            end          
        end
    end

    def post_to_facebook
        if facebook_oauth
            begin
                facebook_oauth.put_wall_post(Setting.sharing[:facebook_message] + " " + referral_url("http://prelaunch.morgans.me"), {picture: "http://prelaunch.morgans.me/assets/morgans_second.jpg"})
                update(facebook_shares: facebook_shares + 1)
            rescue
                # Handle exception
            end
        else
            false
        end
    end

    def post_to_twitter
        if twitter_oauth
            begin
                twitter_oauth.update(Setting.sharing[:twitter_message]+ " " + referral_url("http://prelaunch.morgans.me")) 
                update(twitter_shares: twitter_shares + 1)
            rescue
                # Handle exception
            end
        else
            false
        end
    end

    private

    def set_referral_code
    	self.referral_code = generate_referral_code
    end

    def generate_referral_code
	    loop do
	      code = SecureRandom.hex(5)
	      break code unless self.class.where(referral_code: code).exists?
	    end
    end

    def add_to_email_list
        cc = ConstantContact::Api.new('eg3vheq5mtu39htrg5mtyb4n', "7b75cb8f-040a-4806-9a7b-ce812a6fe884")

        response = cc.get_contact_by_email(email)
        if response && response.respond_to?(:results) && response.results.empty?
            contact = ConstantContact::Components::Contact.create(email_addresses: [{email_address: email}], lists: [{id: "1833066102"}])
            cc.add_contact(contact)
        end
    	#UserMailer.delay.welcome_email(self)
    end

end
